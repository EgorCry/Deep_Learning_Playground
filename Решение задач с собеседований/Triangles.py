"""
Петя достаточно давно занимается в математическом кружке, поэтому он уже понял не
только правила выполнения простейших операций, но и такое достаточно сложное поня-
тие как симметрия. Для того, чтобы получше изучить симметрию, Петя решил начать с
наиболее простых геометрических фигур - треугольников. Он скоро понял, что осевой
симметрией обладают так называемые равнобедренные треугольники. Поэтому теперь Пе-
тя ищет везде такие треугольники.
Напомним, что треугольник называется равнобедренным, если его площадь положительна,
и у него есть хотя бы две равные стороны.
Недавно Петя, зайдя в класс, увидел, что на доске нарисовано n точек. Разумеется,
он сразу задумался, сколько существует троек из этих точек, которые являются вер-
шинами равнобедренных треугольников.
Требуется написать программу, решающую указанную задачу.
3 <= n <= 1_500
"""


def isosceles_triangle(n):
    points = [] * n
    for i in range(n):
        x, y = map(int, input().split())
        points.append((x, y))
    nswr = 0
    for i in range(n):
        used_vectors = set()
        neighbour = []
        for j in range(n):
            vec_x = points[i][0] - points[j][0]
            vec_y = points[i][1] - points[j][1]
            vec_len = vec_x ** 2 + vec_y ** 2
            neighbour.append(vec_len)
            if (vec_x, vec_y) in used_vectors:
                nswr -= 1
            used_vectors.add((-vec_x, -vec_y))
        neighbour.sort()
        r = 0
        for l in range(len(neighbour)):
            while r < len(neighbour) and neighbour[l] == neighbour[r]:
                r += 1
            nswr += r - l - 1
    return nswr
